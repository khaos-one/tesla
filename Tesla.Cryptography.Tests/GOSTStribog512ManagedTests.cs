using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Tesla.Cryptography.Tests
{
    [TestClass]
    public class GOSTStribog512ManagedTests
    {
        [TestMethod]
        public void PredefinedDataTest()
        {
            var sampleData = new byte[]
            {
                0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35,
                0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38,
                0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31,
                0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30
            };
            var originalHash = new byte[]
            {
                0x48, 0x6F, 0x64, 0xC1, 0x91, 0x78, 0x79, 0x41, 0x7F, 0xEF, 0x08, 0x2B, 0x33, 0x81, 0xA4, 0xE2, 0x11, 0xC3,
                0x24, 0xF0, 0x74, 0x65, 0x4C, 0x38, 0x82, 0x3A, 0x7B, 0x76, 0xF8, 0x30, 0xAD, 0x00, 0xFA, 0x1F, 0xBA,
                0xE4, 0x2B, 0x12, 0x85, 0xC0, 0x35, 0x2F, 0x22, 0x75, 0x24, 0xBC, 0x9A, 0xB1, 0x62, 0x54, 0x28, 0x8D,
                0xD6, 0x86, 0x3D, 0xCC, 0xD5, 0xB9, 0xF5, 0x4A, 0x1A, 0xD0, 0x54, 0x1B
            };

            using (var hash = GOSTStribog.Create(512))
            {
                var computedHash = hash.ComputeHash(sampleData);

                CollectionAssert.AreEqual(originalHash, computedHash);
            }
        }
    }
}
