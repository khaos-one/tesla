using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Tesla.Cryptography.Tests {
    [TestClass]
    public class GOSTStribog256ManagedTests {
        [TestMethod]
        public void PredefinedDataTest() {
            var sampleData = new byte[] {
                0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36,
                0x35,
                0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38,
                0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31,
                0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30
            };
            var originalHash = new byte[] {
                0x00, 0x55, 0x7B, 0xE5, 0xE5, 0x84, 0xFD, 0x52, 0xA4, 0x49, 0xB1, 0x6B, 0x02, 0x51, 0xD0, 0x5D, 0x27,
                0xF9,
                0x4A, 0xB7, 0x6C, 0xBA, 0xA6, 0xDA, 0x89, 0x0B, 0x59, 0xD8, 0xEF, 0x1E, 0x15, 0x9D
            };

            using (var hash = GOSTStribog.Create(256)) {
                var computedHash = hash.ComputeHash(sampleData);

                CollectionAssert.AreEqual(originalHash, computedHash);
            }
        }
    }
}